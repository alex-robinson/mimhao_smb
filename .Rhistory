image.plot(groundline$u)
image.plot(groundline$v)
##flux_gl_u = -groundline$u * icelon * VEL_R11$u
flux_gl_u = (-groundline$u * 40e3 * VEL_R11$u * h /1e6) #CHANGED
flux_gl_v = (-groundline$v * 40e3 * VEL_R11$v * h /1e6) #CHANGED
#flux_gl_v = ((-groundline$v * 40e3 * h + -groundline$v * 40e3 * h) /1e6)
flux_gl_v_plot = apply(flux_gl_v, c(1,2), function(x) if (x==0) NA else x) #CHANGED
flux_gl_u_plot = apply(flux_gl_u, c(1,2), function(x) if (x==0) NA else x) #CHANGED
image.plot(Xc,Yc, flux_gl_v_plot)
flux_gl = flux_gl_u + flux_gl_v
#df_gl = data.frame(row.names=index)
for (i in 1:length(index)){                                          #CHANGED
df_gl[i,"groundline-bm"]    = sum(flux_gl_v*region_mask[[i]]$land)  #CHANGED
}       print(flux_gl)
##flux_gl_u = -groundline$u * icelon * VEL_R11$u
flux_gl_u = (-groundline$u * 40e3 * VEL_R11$u * h *0.916/1e9) #CHANGED
flux_gl_v = (-groundline$v * 40e3 * VEL_R11$v * h *0.916/1e9) #CHANGED
#flux_gl_v = ((-groundline$v * 40e3 * h + -groundline$v * 40e3 * h) /1e6)
flux_gl_v_plot = apply(flux_gl_v, c(1,2), function(x) if (x==0) NA else x) #CHANGED
flux_gl_u_plot = apply(flux_gl_u, c(1,2), function(x) if (x==0) NA else x) #CHANGED
image.plot(Xc,Yc, flux_gl_v_plot)
flux_gl = flux_gl_u + flux_gl_v
print(flux_gl)
#df_gl = data.frame(row.names=index)
for (i in 1:length(index)){                                          #CHANGED
df_gl[i,"groundline-bm"]    = sum(flux_gl_v*region_mask[[i]]$land)  #CHANGED
}
flux_gl
flux_gl_u
source('~/TFM/mimhao_smb/calculations.r')
image.plot(groundline$u)
image.plot(abs(groundline$u))
image.plot(abs(groundline$u)+abs(groundline$v))
image.plot(landcontour+abs(groundline$u)+abs(groundline$v))
image.plot(landcontour-abs(groundline$u)-abs(groundline$v))
sum(landcontour-abs(groundline$u)-abs(groundline$v))
image.plot(abs(groundline$u))
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
df_gl
sum(df_gl)
source('~/TFM/mimhao_smb/calculations.r')
sum(df_gl)
for (i in 1:length(index)){                                          #CHANGED
df_gl[i,"groundline-bm"]    = sum((flux_gl_v+flux_gl_u)*region_mask[[i]]$land)  #CHANGED
}
df_gl
sum(df_gl)
df_gl[1]
df_gl[[i]
df_gl[[1]]
df_gl[[1]]
df_gl
df_gl[1, "groundline-bm"]
flux_gl = sum(flux_gl_u + flux_gl_v)
image.plot(Xc,Yc, flux_gl_v_plot)
image.plot(flux_gl_v_plot)
image.plot(Xc,Yc, flux_gl_v_plot)
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
## Plot of the topography of the Antarctica
pdf(file.path(outfldr,"TOPO_BEDMAP2.pdf"))
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
#image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}#The following code in this loop is written to put the number of the regions in the plot
#current_basin = which(region_mask[[i]]$land+region_mask[[i]]$ice!=0, arr.ind=TRUE)
#basin_coordinates[i] = current_basin[8] #We take the first coincidence
#text(Xc[basin_coordinates[i]], Yc[basin_coordinates[i]] ,label = i)
}
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
#image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}#The following code in this loop is written to put the number of the regions in the plot
#current_basin = which(region_mask[[i]]$land+region_mask[[i]]$ice!=0, arr.ind=TRUE)
#basin_coordinates[i] = current_basin[8] #We take the first coincidence
#text(Xc[basin_coordinates[i]], Yc[basin_coordinates[i]] ,label = i)
}
source('~/TFM/mimhao_smb/calculations.r')
colors = c('chocolate4', 'orange', 'lightblue4', 'lightskyblue', 'blue',
'mediumspringgreen', 'firebrick4', 'gold', 'darkolivegreen',
'sandybrown', 'aquamarine4', 'darkgoldenrod', 'gray80', 'seagreen',
'pink3', 'khaki1', 'darkred', 'green', 'magenta', 'lightsteelblue',
'mediumblue', 'lightsalmon', 'aquamarine', 'yellow2', 'cadetblue1',
'darkorange', 'darkgreen')
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
#image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}#The following code in this loop is written to put the number of the regions in the plot
#current_basin = which(region_mask[[i]]$land+region_mask[[i]]$ice!=0, arr.ind=TRUE)
#basin_coordinates[i] = current_basin[8] #We take the first coincidence
#text(Xc[basin_coordinates[i]], Yc[basin_coordinates[i]] ,label = i)
}
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}#The following code in this loop is written to put the number of the regions in the plot
#current_basin = which(region_mask[[i]]$land+region_mask[[i]]$ice!=0, arr.ind=TRUE)
#basin_coordinates[i] = current_basin[8] #We take the first coincidence
#text(Xc[basin_coordinates[i]], Yc[basin_coordinates[i]] ,label = i)
}
contour(Xc, Yc, mask_ice_land, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="red1") #grounding line contour
contour(Xc, Yc, mask_ice_all, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="black") #total contour
title("Antarctica (TOPO BEDMAP2)")
dev.off()
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}#The following code in this loop is written to put the number of the regions in the plot
#current_basin = which(region_mask[[i]]$land+region_mask[[i]]$ice!=0, arr.ind=TRUE)
#basin_coordinates[i] = current_basin[8] #We take the first coincidence
#text(Xc[basin_coordinates[i]], Yc[basin_coordinates[i]] ,label = i)
}
contour(Xc, Yc, mask_ice_land, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="red1") #grounding line contour
contour(Xc, Yc, mask_ice_all, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="black") #total contour
title("Antarctica (TOPO BEDMAP2)")
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
help png
help(png)
png(file.path(outfldr,"TOPO_BEDMAP2.png"))
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
#image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}#The following code in this loop is written to put the number of the regions in the plot
#current_basin = which(region_mask[[i]]$land+region_mask[[i]]$ice!=0, arr.ind=TRUE)
#basin_coordinates[i] = current_basin[8] #We take the first coincidence
#text(Xc[basin_coordinates[i]], Yc[basin_coordinates[i]] ,label = i)
}
contour(Xc, Yc, mask_ice_land, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="red1") #grounding line contour
contour(Xc, Yc, mask_ice_all, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="black") #total contour
title("Antarctica (TOPO BEDMAP2)")
dev.off()
png(file.path(outfldr,"TOPO_BEDMAP2.png"))
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
#image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}
}
contour(Xc, Yc, mask_ice_land, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="red1") #grounding line contour
contour(Xc, Yc, mask_ice_all, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="black") #total contour
dev.off()
png(file.path(outfldr,"TOPO_BEDMAP2.png"))
image(Xc, Yc, mask_plot2,col=NA) #first plot
for (i in 1:27){
#image(Xc, Yc, region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) #plot of each region (27)
for (ii in seq(length=length(Xc))){
for (ij in seq(length=length(Yc))){
if (region_mask[[i]]$ice[ii,ij] != 0) {
points(Xc[ii], Yc[ij], pch = ".", cex = .1) #ice shelves are points
}
}
}
}
contour(Xc, Yc, mask_ice_land, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="red1") #grounding line contour
contour(Xc, Yc, mask_ice_all, nlevels=1, add=TRUE, drawlabels=FALSE,lwd=2, col="black") #total contour
dev.off()
install.packages("openxlsx")
install.packages("xlsx")
library(openxlsx)
library(xlsx)
source('~/TFM/mimhao_smb/calc_rignot_table.r')
install.packages("openxlsx")
source('~/TFM/mimhao_smb/calc_rignot_table.r')
View(rig)
tmp
rig
tmp[1]
tmp[2]
tmp[[1]]
tmp
tmp1
rig
tmp
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
rig0$Ice-front.flux
rig0$Ice.-.front.flux
rig0$Ice.front.flux
rig0
rig0$Ice-front.flux
rig0$Ice-front.flux[2]
rig0$'Ice-front.flux'
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
rig0
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
rig0
rig
#∂H/∂t
dhdt = strsplit(rig0$dHdt[q],"±")[[1]]
dhdt1 = strsplit(dhdt[2]," ")[[1]][1]
rig$dHdt[q]     = dhdt[1] #∂H/∂t
rig$dHdt.err[q] = dhdt1 #∂H/∂t error
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig0$dHdt
rig0$dHdt[]
rig0$dHdt[3]
rig0
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig0
rig
rig0
rig
rig0$'∂H/∂t'
rig0$'∂H/∂t'[14]
strsplit(rig0$'∂H/∂t'[14],"±")[[1]]
strsplit(rig0$'∂H/∂t'[14]," ")[[1]]
strsplit(strsplit(rig0$'∂H/∂t'[14],"±")[[1]], " ")[[1]][1]
strsplit(rig0$'∂H/∂t'[14],"±")[[1]][2]
strsplit(strsplit(rig0$'∂H/∂t'[14],"±")[[1]][2], "[5]")
strsplit(strsplit(rig0$'∂H/∂t'[14],"±")[[1]][2], "[")
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
rig0
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
rig0
rig0$B
rig
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
rig0
rig
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig
help("write.xlsx")
write.xlsx(rig,"data/1235798tableS1.xlsx",addWorksheet(wb,Sheet2))
write.xlsx(rig,"data/1235798tableS1.xlsx",addWorksheet(wb,Sheet2))
write.xlsx(rig,"data/1235798tableS1.xlsx",addWorksheet())
help("addWorksheet")
write.xlsx(rig,"data/1235798tableS1.xlsx",addWorksheet(1235798tableS1.xlsx,Sheet2))
source('~/TFM/mimhao_smb/calc_rignot_table.r')
help(workbook)
??workbook
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
wb
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations1.r')
source('~/TFM/mimhao_smb/function_regions.r')
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
source('calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations1.r')
source('~/TFM/mimhao_smb/calculations.r')
source('function_regions.r')
source('load_data.r')
source('~/TFM/mimhao_smb/calculations1.r')
source("function_regions.r")
source("calculations.r")
source('~/TFM/mimhao_smb/calculations1.r')
source("load_data.r")
source('~/TFM/mimhao_smb/calculations.r')
# First, make sure to load the data using:
source('load_data.r')
# Load dependencies
source('~/TFM/mimhao_smb/function_regions.r')
library(gridExtra)
library(fields)
# Define the output folder
outfldr = "~/TFM/mimhao_smb/output"
# First, make sure to load the data using:
source('load_data.r')
# Load dependencies
source('~/TFM/mimhao_smb/function_regions.r')
library(gridExtra)
library(fields)
# Define the output folder
outfldr = "~/TFM/mimhao_smb/output"
source('~/TFM/mimhao_smb/calculations.r')
outfldr
source('~/TFM/mimhao_smb/load_data.r')
data_fldr = file.path("./TFM/mimhao_smb/data/",gridname)
## Script to load the data from .nc with RNetCDF library
library(RNetCDF)
# Define grid name
gridname = "ANT-40KM"
# Define the input data folder
data_fldr = file.path("./TFM/mimhao_smb/data/",gridname)
# Determine filenames of all data files
files = list.files(data_fldr)
# Extract dataset names from filenames
dat_names = files
dat_names = gsub(paste0(gridname,"_"),"",dat_names)
dat_names = gsub(".nc","",dat_names)
dat_names = gsub("-","_",dat_names)
# Load the datasets and store them with the appropriate names
for (i in 1:length(dat_names)) {
nc = open.nc(file.path(data_fldr,files[i]))
assign(dat_names[i], read.nc(nc))
cat("Loaded dataset: ",dat_names[i],"\n")
close.nc(nc)
}
# Clean up some variables
if (gridname=="ANT-40KM") {
TOPO_BEDMAP2$mask[TOPO_BEDMAP2$mask==1] = 3
TOPO_BEDMAP2$mask_ice = TOPO_BEDMAP2$mask
}
VEL_R11$u[VEL_R11$u>6e3]   = 0
VEL_R11$v[VEL_R11$v>6e3]   = 0
VEL_R11$uv[VEL_R11$uv>6e3] = 0
# Make some additional global helper variables
# common to all datasets
Xc    = BASINS_nasa$xc
Yc    = BASINS_nasa$yc
area  = BASINS_nasa$area
dxdy  = sqrt(area)
lon2D = BASINS_nasa$lon2D
lat2D = BASINS_nasa$lat2D
cat("Global dimensions: Xc, Yc, area, lon2D, lat2D","\n")
data_loaded = TRUE
source('~/TFM/mimhao_smb/load_data.r')
files
## Function to extract the region's mask of land and ice -----------------------
source('~/TFM/mimhao_smb/function_regions.r')
dat_names
gridname
data_fldr
source('~/TFM/mimhao_smb/load_data.r')
data_fldr
files
list.files("data_fldr")
list.files("./TFM/mimhao_smb")
list.files("./TFM/mimhao_smb/data/ANT-40KM")
list.files("./ANT-40KM")
list.files("./data/ANT-40KM")
source('~/TFM/mimhao_smb/load_data.r')
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
plot(region_mask)
plot(region_mask[1])
plot(Xc,Yc,region_mask[[1]])
plot(region_mask[[1]])
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]], add=TRUE, col=c(NA,colors[i]))
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i]))
for(i in 1:27){}
for(i in 1:27){
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) }
for(i in 1:27){
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=FALSE, col=c(NA,colors[i])) }
for(i in 1:27){
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=FALSE, col=c(NA,colors[i])) }
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
for(i in 1:27){
image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=FALSE, col=c(NA,colors[i])) }
for(i in 1:27){image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) }
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
source('~/TFM/mimhao_smb/calculations.r')
for(i in 1:27){image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=TRUE, col=c(NA,colors[i])) }
for(i in 1:27){image(Xc, Yc, region_mask[[i]]$land+region_mask[[i]]$ice, add=FALSE, col=c(NA,colors[i])) }
source('~/TFM/mimhao_smb/calc_rignot_table.r')
View(rig)
rig$Larsen
rig$Larsen G
rig$Larsen.G
rig$Larsen_G
rig$Larsen-G
rig$Larsen_G
rig
rig[1]
rig[1]==Larsen.G
rig[1]==Larsen_G
rig[1]==LarsenG
rig[1]=="Larsen G"
find(rig[1]=="Larsen G")
rig[1]=="Larsen G"
find(rig[1]=="Larsen G")
help.find
help(find)
find(rig[1])=="Larsen G"
find(rig[1])=="Bach"
find(rig[1]=="Bach")
find("Bach")
rig[1]=="Larsen G"
a=rig[1]=="Larsen G"
a
find(a)
rig=="Larsen G"
rig[c("Bach")]
rig[1][c("Bach")]
rig[1]$"Bach"
rig[1]$Bach
rigach
rig$Bach
rig$"Bach"
rig
rig$SMB
rig[1]$SMB
rig$SMB[1]
rig$SMB[=="Bach"]
rig$SMB["Bach"]
which(rig=="Bach")
rig$SMB[which(rig=="Bach")]
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
new0
nwe
new
new0
new0$Name
rig
rig$Name
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig$SMB[which(rig=="Ronne")]
rig$SMB[which(rig=="Ronne")]+rig$SMB[which(rig=="Larsen G")]
rig$SMB[which(rig=="Larsen G")]
as.numeric(rig$SMB[which(rig=="Ronne"))
rig$SMB[which(rig=="Ronne")
]
as.numeric(rig$SMB[which(rig=="Ronne")])
source('~/TFM/mimhao_smb/calc_rignot_table.r')
rig$SMB[which(rig == "Fichner")
]
rig$SMB[which(rig == "Fichner")]
rig$SMB[which(rig == "Vigrid")]
rig
rig$Name
new0
View(new0)
View(new0)
source('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
new$SMB[1]=as.numeric(rig$SMB[which(rig=="Ronne")])+as.numeric(rig$SMB[which(rig=="Larsen G")])
new$SMB[2]=as.numeric(rig$SMB[which(rig=="Filchner")])
new$SMB[3]=as.numeric(rig$SMB[which(rig=="Quar")])+as.numeric(rig$SMB[which(rig=="Riiser-Larsen")])+as.numeric(rig$SMB[which(rig=="Brunt/Stancomb")])
new$SMB[4]=as.numeric(rig$SMB[which(rig=="Jelbart")])+as.numeric(rig$SMB[which(rig=="Atka")])+as.numeric(rig$SMB[which(rig=="Ekstrom")])
new$SMB[5]=as.numeric(rig$SMB[which(rig=="Baudouin")])+as.numeric(rig$SMB[which(rig=="Borchgrevink")])+as.numeric(rig$SMB[which(rig=="Lazarev")])+as.numeric(rig$SMB[which(rig=="Nivl")])+as.numeric(rig$SMB[which(rig=="Vigrid")])+as.numeric(rig$SMB[which(rig=="Fimbul")])
new$SMB[6]=as.numeric(rig$SMB[which(rig=="Rayner/Thyer")])+as.numeric(rig$SMB[which(rig=="Shirase")])+as.numeric(rig$SMB[which(rig=="Prince Harald")])
new$SMB[7]=as.numeric(rig$SMB[which(rig=="Wilma/Robert/Downer")])+as.numeric(rig$SMB[which(rig=="EdwardVII")])
new$SMB[8]=as.numeric(rig$SMB[which(rig=="Conger")])+as.numeric(rig$SMB[which(rig=="Tracy")])+as.numeric(rig$SMB[which(rig=="Shackleton")])+as.numeric(rig$SMB[which(rig=="West")])+as.numeric(rig$SMB[which(rig=="Publications")])
new$SMB[9]=as.numeric(rig$SMB[which(rig=="Holmes")])+as.numeric(rig$SMB[which(rig=="Moscow")])+as.numeric(rig$SMB[which(rig=="Totten")])+as.numeric(rig$SMB[which(rig=="Vincennes")])
new$SMB[1]=as.numeric(rig$SMB[which(rig=="Ronne")])+as.numeric(rig$SMB[which(rig=="Larsen G")])
new$SMB[2]=as.numeric(rig$SMB[which(rig=="Filchner")])
debugSource('~/TFM/mimhao_smb/calc_rignot_table.r')
debugSource('~/TFM/mimhao_smb/calc_rignot_table.r')
source('~/TFM/mimhao_smb/calc_rignot_table.r')
